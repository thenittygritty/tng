Title: My first experience building apps for Firefox OS (and web + FFOS + ChromeOS)
----
Date: 2013-05-30
----
Author: addy-osmani
----
Categories: Firefox OS, mobile, apps
----
Description: Addy Osmani discribes his first experience building apps for Firefox OS.
----
Tags: firefox os, apps, web technology, mobile, phones
----
Comments: on
----
Text:

**I was speaking at [Web Rebels](http://webrebels.org/) this week, where the Firefox OS team were kind enough to give me a new Geekphone Peak device, so I dove right into building some apps for it. Obligatory unboxing pics below!**

<figure class="image-full">(image: Photo 2013-05-26 02.49.19 PM.jpg)<figcaption>Firefox OS unboxing</ficaption></figure>

<figure class="image-full">(image: Photo 2013-05-26 02.48.49 PM.jpg)<figcaption>Firefox OS unboxing</ficaption></figure>

My first idea for a Firefox OS app was a simple [AngularJS Github issues viewer](https://github.com/addyosmani/github-client) (based on https://github.com/da-ff/ng-github-client) with views for authentication, a dashboard and info editing amongst others. This is a simple enough app, but as it handles auth. and relies on a real data source I figured it might be a more realistic base than a todo app ; ).

<figure class="image-full">(image: ffox_r1_c1.jpg)<figcaption>&hearts;</ficaption></figure>

<figure class="image-full">(image: ffox_r2_c1.jpg)<figcaption>&hearts;</ficaption></figure>

<figure class="image-full">(image: ffox_r3_c1.jpg)<figcaption>&hearts;</ficaption></figure>

Firefox OS exposes some additional APIs on devices, so I thought it might be interesting to try adding support for the Vibration API, Web Activities and Web Notifications. These would let me share (activities), alert on error (device vibrate, alarm) and inform me when a connection was no longer available (notifications).

At this point I must say - setting up much of this was massively simplified thanks to the great work Robert Nyman has done on the Firefox OS boilerplate https://github.com/robnyman/Firefox-OS-Boilerplate-App.

<figure class="image-full">(image: Untitled-3_r1_c1.jpg)<figcaption>&hearts;</ficaption></figure>

Robert's boilerplate includes complete code snippets for many of the common tasks you might want to use such APIs for and would actually love to see us do something similar for a boilerplate for Chrome apps. It also includes boilerplate manifest.webapp files, and you may find the online validator for these useful if heavily modifying for your own needs https://marketplace.firefox.com/developers/validator.

I kickstarted off my app using Yeoman and the Firefox OS generator (https://github.com/zenorocha/generator-firefox-os) which serves up Robert's boilerplate via the command-line.

<figure class="image-full">(image: 687474703a2f2f636c2e6c792f696d6167652f30453053326a336f324630722f66697265666f782d79656f6d616e2e6a7067.jpg)<figcaption>&hearts;</ficaption></figure>

To get this setup:


#Install Yeoman:
npm install -g yo
# Install this generator:
npm install -g generator-firefox-os
#Run:
yo firefox-os
If you don't want to use the boilerplate or Yeoman to create your app, you can get started with a Firefox OS app in just a few steps:

1. Create a new directory called 'myapp'
2. Create a new HTML file in this directory (e.g index.html)
3. Tools > Web Developer > Responsive Design View in Firefox will let you preview the app using some mobile sizes
4. Create a manifest.webapp file with some name, permissions details https://developer.mozilla.org/en-US/docs/Apps/Manifest
5. Tools > Web Developer > Firefox OS simulator (when installed), click 'add directory' and then just select your manifest.webapp
6. You should be able to see the app you created
7. Once your app is finished, just upload it to a server (or GitHub pages) and share the link

Not everyone agrees with me, but I look at Firefox OS and Chrome OS as enhanced build targets. My personal approach with them is to build a web app so that it can work fine in any browser and then progressively enhance it using feature detection for the enhanced APIs you'd like to take advantage of. This is sometime easier said than done, but does mean that you treat these platforms as build targets and don't have to treat them as entirely different apps. If you're using Grunt for your task/build process, just setup your FFOS app as a second build target and include your manifest files/additional scripts. grunt-env and grunt-preprocess can be useful here: http://stackoverflow.com/a/14970339. QuickOffice (part of the Google Docs team) do something similar for their Chrome app, which also gets deployed as a Phonegap app for other platforms.

<figure class="image-full">(image: overview.png)<figcaption>&hearts;</ficaption></figure>

Next, onto debugging. I installed the Firefox OS simulator https://addons.mozilla.org/en-US/firefox/addon/firefox-os-simulator/ which will lets you preview what your app might look like on a device and also detects whether an FFOS device is connected so you can remotely debug using their developer tools. The simulator is extremely straight-forward to use, allowing you to preview apps hosted remotely/your own server or simply those being worked on on the local filesystem. You also have access to a detailed error console, for keeping an eye on general exceptions and errors about unsupported APIs.

The 'Push' to device button also made it a breeze to switch between the Geekphone and Simulator at any time.

Note that Mozilla's documentation https://developer.mozilla.org/en-US/docs/Tools/Firefox_OS_Simulator is forward about the limitations of the simulator - for APIs that aren't available on desktop (vibration, telephony), you may find yourself having to throw/log your own debug errors. I personally also found that my app appeared visually different in the simulator than it did when I deployed to my Geekphone device. As a developer preview, I found the changes minimal enough to not be distruptive but I plan on investigating further/reporting bugs if it's not simply an issue with the boilerplate. Some other minor things I ran into:

* OAuth:  Pop-ups: eg. OAuth login windows to third-party services won't automatically launch within an FFOS app window, meaning you'll need to work around this if your users need to login using this type of setup.
Workaround 1: There is apparently a difference between how window.open(...,'_blank')  and window.open() are handled in FFOS (see https://groups.google.com/forum/?fromgroups#!topic/mozilla.dev.b2g/IWFEZNpQuM0), so use the appropriate option.
Workaround 2: Web activities so that the link to authenticate is done inside the browser and then redirects you back to the app. I felt a code example demonstrating doing this would have saved me some time and recommend looking at the FFOS communications app source for an example of how to handle this for Facebook login https://github.com/mozilla-b2g/gaia/tree/master/apps/communications/contacts/oauth2
Alternatively, you can just use something like PHP to ease the OAuth process for you as was done in the GitHub-client app.

* Debugging: Part of me hoped that I could right-click > inspect element within the FFOS simulator to just start debugging my app that way, but going through Device Information > More Information > Developer it's possible to just enable remote debugging and 'connect' to the debugger that way instead.

* Demo apps: As the Geekphone for FFOS is still fairly new, the number of GitHub-hosted apps you can use for reference is currently small, but growing. For developers who aren't able to find answers to 'how was X done' in Google groups or the Mozilla docs, do check out https://github.com/mozilla-b2g/gaia/tree/master/apps where you can find the source to most of the apps installed by default on FFOS. I found this useful for those cases where I needed something more advanced than what was provided in the boilerplate.

I was impressed that for performance profiling, Firefox OS makes paint flashing and an FPS counter just a few quick touches away, making it simple to debug and check where you might be experiencing issues.

<figure class="image-full">(image: Photo 2013-05-26 02.48.22 PM.jpg)<figcaption>&hearts;</ficaption></figure>

I did find myself having to go back to the Chrome DevTools for more granular profiling needs but flipping between browsers and tools didn't really slow me down that much. For the process of actually deploying an app, Chris Lord's writing/deployment guide was helpful http://chrislord.net/index.php/2013/05/04/writing-and-deploying-a-small-firefox-os-application/ as was https://thelab.o2.com/2013/05/my-experience-with-firefox-os/.

Great, so building a simple application that works on Firefox OS based on the boilerplate isn't massively difficult and as with any platform just takes a little time to get used to. I actually really enjoyed writing IssueHub. Some screenshots of it can be found below:


The next thing I wanted to set out to do was see if I could build an app that worked everywhere, so in any modern browser but *also* as a Chrome app and Firefox OS app.  For this, I used the already well-developed TimerX3 web app https://github.com/alefteris/timerx3, which was built using Yeoman, Grunt and Bower:

<figure class="image-full">(image: Screen Shot 2013-05-25 at 22.55.50.png)<figcaption>&hearts;</ficaption></figure>
<figure class="image-full">(image: Screen Shot 2013-05-25 at 23.28.59.png)<figcaption>&hearts;</ficaption></figure>
<figure class="image-full">(image: Photo 2013-05-26 02.47.21 PM.jpg)<figcaption>&hearts;</ficaption></figure>

TimerX3 let's you install from the web if it's supported (FFOS only), uses Firefox OS-specific APIs but also works fine in other browsers with a slightly degraded experience (no vibration etc). Adjusting the codebase for this app so that I could get some of the same enhanced features available to FFOS users (e.g notifications) involved a few steps:

* Create a manifest.json (specifying your app name, description, paths and so on) and general entry point (e.g main.js) specifying the window/launch settings for the application. Make sure to point the app at the same index.html file used for the FFOS app and that your app icon locations are also referenced as necessary. You can then just debug the extension from about:extensions

<figure class="image-full">(image: Screen Shot 2013-05-25 at 22.55.11.png)<figcaption>&hearts;</ficaption></figure>

* Check that any 'extra' APIs being used didn't require different syntax in Chrome as they did in Firefox OS. If these APIs weren't present, ensure nothing in your codebase is going to throw errors as a result which will stop your app from working. Remember, these extra APIs are something I consider to be sugar to the web app, not something core to it being able to function

<figure class="image-full">(image: Screen Shot 2013-05-25 at 23.54.30.png)<figcaption>&hearts;</ficaption></figure>

* Installing FFOS apps from any domain rather than just the app store is a great step forward, but this is something the Chrome Web Store also supports in the form of inline installation https://developers.google.com/chrome/web-store/docs/inline_installation. Setup chrome.webstore.install() and your users will be able to inline install the same way you can with FFOS.


<figure class="image-full">(image: Screen Shot 2013-05-25 at 23.30.27.png)<figcaption>&hearts;</ficaption></figure>

Once this looks good, you can add your Chrome app as a second/third build target to your Gruntfile and just specify those additional files (e.g manifest.json etc) you want to build into their own target. This way you end up with three builds - one for your standard webapp, one for your Firefox OS app and another for your Chrome app all of which can be offered up to your users via the web or dedicated app stores. For those interested, I'm including screenshots of the TimerX3 app working across all of the build targets I was hacking away at.

<figure class="image-full">(image: apps.jpg)<figcaption>&hearts;</ficaption></figure>

I'll post the code to GitHub at some point once I get a chance to clean it up, but all in all I enjoyed my experience building both an app that worked on Firefox OS and extending another to work everywhere.

<figure class="image-full">(image: Photo 2013-05-26 02.47.36 PM.jpg)<figcaption>&hearts;</ficaption></figure>

Right now the biggest thing I think the FFOS ecosystem needs is improved documentation. The getting started experience is fantastic, but beyond that an increase in tutorials walking developers through creating apps of different complexity would be welcome.

I know a few developers have asked me if the Simulator on it's own is 'enough' for creating a fully-functional app - my honest answer is that for most enhanced APIs, you can get really far with it. Test out the boilerplate by Robert if you need proof of that.  If you're intending on deploying an app that uses features the simulator can't handle however, I recommend mocking them during development and then trying to get a loaner device from a local device lab if one is available.

I hope this ramble is useful to someone :)
